% This code was generated using ADiGator version 1.4
% ©2010-2014 Matthew J. Weinstein and Anil V. Rao
% ADiGator may be obtained at https://sourceforge.net/projects/adigator/ 
% Contact: mweinstein@ufl.edu
% Bugs/suggestions may be reported to the sourceforge forums
%                    DISCLAIMER
% ADiGator is a general-purpose software distributed under the GNU General
% Public License version 3.0. While the software is distributed with the
% hope that it will be useful, both the software and generated code are
% provided 'AS IS' with NO WARRANTIES OF ANY KIND and no merchantability
% or fitness for any purpose or application.

function dZ = dac3DOFdyn(Z,U,prm)
global ADiGator_dac3DOFdyn
if isempty(ADiGator_dac3DOFdyn); ADiGator_LoadData(); end
Gator1Data = ADiGator_dac3DOFdyn.dac3DOFdyn.Gator1Data;
% ADiGator Start Derivative Computations
%User Line: % Z = [V,chi,gam,x,y,z]
%User Line: % U = [CL,mu,CT,VR]
CL.f = U(1);
%User Line: CL = U(1);
mu.f = U(2);
%User Line: mu = U(2);
CT.f = U(3);
%User Line: CT = U(3);
VR.f = U(4);
%User Line: VR = U(4);
V.dZ = Z.dZ(1);
V.f = Z.f(1);
%User Line: V = Z(1);
chi.dZ = Z.dZ(2);
chi.f = Z.f(2);
%User Line: chi = Z(2);
gam.dZ = Z.dZ(3);
gam.f = Z.f(3);
%User Line: gam = Z(3);
z.dZ = Z.dZ(6);
z.f = Z.f(6);
%User Line: z = Z(6);
dZ.f =  zeros(6,1);
%User Line: dZ = zeros(6,1);
%User Line: %%%%% Wind Model
%User Line: % exponential
cada1f1dZ = -z.dZ;
cada1f1 = uminus(z.f);
cada1f2dZ = prm.p_exp.*cada1f1.^(prm.p_exp-1).*cada1f1dZ;
cada1f2dZ((cada1f1 == 0 & cada1f1dZ == 0) | prm.p_exp == 0) = 0;
cada1f2 = cada1f1^prm.p_exp;
Wx.dZ = VR.f.*cada1f2dZ;
Wx.f = VR.f*cada1f2;
%User Line: Wx = VR*(-z)^prm.p_exp;
cada1f1 = prm.p_exp*VR.f;
cada1f2dZ = -z.dZ;
cada1f2 = uminus(z.f);
cada1f3dZ = prm.p_exp.*cada1f2.^(prm.p_exp-1).*cada1f2dZ;
cada1f3dZ((cada1f2 == 0 & cada1f2dZ == 0) | prm.p_exp == 0) = 0;
cada1f3 = cada1f2^prm.p_exp;
cada1f4dZ = cada1f1.*cada1f3dZ;
cada1f4 = cada1f1*cada1f3;
cada1td1 = cada1f4dZ./z.f;
cada1td1 = cada1td1 + -cada1f4./z.f.^2.*z.dZ;
Wxz.dZ = cada1td1;
Wxz.f = cada1f4/z.f;
%User Line: Wxz = (prm.p_exp*VR)*((-z)^prm.p_exp)/z;
Cmu.f = cos(mu.f);
%User Line: Cmu = cos(mu);
Smu.f = sin(mu.f);
%User Line: Smu = sin(mu);
Cgam.dZ = -sin(gam.f).*gam.dZ;
Cgam.f = cos(gam.f);
%User Line: Cgam = cos(gam);
Sgam.dZ = cos(gam.f).*gam.dZ;
Sgam.f = sin(gam.f);
%User Line: Sgam = sin(gam);
Cchi.dZ = -sin(chi.f).*chi.dZ;
Cchi.f = cos(chi.f);
%User Line: Cchi = cos(chi);
Schi.dZ = cos(chi.f).*chi.dZ;
Schi.f = sin(chi.f);
%User Line: Schi = sin(chi);
cada1f1dZ = 0.6125.*V.dZ;
cada1f1 = 0.6125*V.f;
cada1td1 = V.f.*cada1f1dZ;
cada1td1 = cada1td1 + cada1f1.*V.dZ;
Q.dZ = cada1td1;
Q.f = cada1f1*V.f;
%User Line: Q = 0.5*1.225*V*V;
cada1f1dZ = prm.S.*Q.dZ;
cada1f1 = Q.f*prm.S;
cada1f2 = prm.CD1*CL.f;
cada1f3 = prm.CD0 + cada1f2;
cada1f4 = prm.CD2*CL.f;
cada1f5 = cada1f4*CL.f;
cada1f6 = cada1f3 + cada1f5;
D.dZ = cada1f6.*cada1f1dZ;
D.f = cada1f1*cada1f6;
%User Line: D = Q*prm.S*(prm.CD0 + prm.CD1*CL + prm.CD2*CL*CL);
cada1f1dZ = prm.S.*Q.dZ;
cada1f1 = Q.f*prm.S;
L.dZ = CL.f.*cada1f1dZ;
L.f = cada1f1*CL.f;
%User Line: L = Q*prm.S*CL;
cada1f1dZ = prm.S.*Q.dZ;
cada1f1 = Q.f*prm.S;
T.dZ = CT.f.*cada1f1dZ;
T.f = cada1f1*CT.f;
%User Line: T = Q*prm.S*CT;
cada1td1 = zeros(2,1);
cada1td1(1) = Cchi.f.*V.dZ;
cada1td1(2) = cada1td1(2) + V.f.*Cchi.dZ;
cada1f1dZ = cada1td1;
cada1f1 = V.f*Cchi.f;
cada1td1 = zeros(3,1);
cada1td1(Gator1Data.Index1) = Cgam.f.*cada1f1dZ;
cada1td1(3) = cada1td1(3) + cada1f1.*Cgam.dZ;
cada1f2dZ = cada1td1;
cada1f2 = cada1f1*Cgam.f;
cada1td1 = zeros(4,1);
cada1td1(Gator1Data.Index2) = cada1f2dZ;
cada1td1(4) = cada1td1(4) + Wx.dZ;
cada1f3dZ = cada1td1;
cada1f3 = cada1f2 + Wx.f;
dZ.dZ = cada1f3dZ;
dZ.f(4) = cada1f3;
%User Line: dZ(4) = V*Cchi*Cgam + Wx;
cada1td1 = zeros(2,1);
cada1td1(1) = Schi.f.*V.dZ;
cada1td1(2) = cada1td1(2) + V.f.*Schi.dZ;
cada1f1dZ = cada1td1;
cada1f1 = V.f*Schi.f;
cada1td1 = zeros(3,1);
cada1td1(Gator1Data.Index3) = Cgam.f.*cada1f1dZ;
cada1td1(3) = cada1td1(3) + cada1f1.*Cgam.dZ;
cada1f2dZ = cada1td1;
cada1f2 = cada1f1*Cgam.f;
cada1td1 = zeros(7,1);
cada1td1(Gator1Data.Index4) = cada1f2dZ;
cada1td1(Gator1Data.Index5) = dZ.dZ(Gator1Data.Index6);
dZ.dZ = cada1td1;
dZ.f(5) = cada1f2;
%User Line: dZ(5) = V*Schi*Cgam;
cada1f1dZ = -V.dZ;
cada1f1 = uminus(V.f);
cada1td1 = zeros(2,1);
cada1td1(1) = Sgam.f.*cada1f1dZ;
cada1td1(2) = cada1td1(2) + cada1f1.*Sgam.dZ;
cada1f2dZ = cada1td1;
cada1f2 = cada1f1*Sgam.f;
cada1td1 = zeros(9,1);
cada1td1(Gator1Data.Index7) = cada1f2dZ;
cada1td1(Gator1Data.Index8) = dZ.dZ(Gator1Data.Index9);
dZ.dZ = cada1td1;
dZ.f(6) = cada1f2;
%User Line: dZ(6) = -V*Sgam;
cada1f1dZ = -D.dZ;
cada1f1 = uminus(D.f);
cada1f2dZ = cada1f1dZ./prm.m;
cada1f2 = cada1f1/prm.m;
cada1f3dZ = 9.805999999999999.*Sgam.dZ;
cada1f3 = 9.805999999999999*Sgam.f;
cada1td1 = zeros(2,1);
cada1td1(1) = cada1f2dZ;
cada1td1(2) = cada1td1(2) + -cada1f3dZ;
cada1f4dZ = cada1td1;
cada1f4 = cada1f2 - cada1f3;
cada1f5dZ = dZ.dZ(Gator1Data.Index10);
cada1f5 = dZ.f(6);
cada1td1 = zeros(3,1);
cada1td1(3) = cada1f5.*Wxz.dZ;
cada1td1(Gator1Data.Index11) = cada1td1(Gator1Data.Index11) + Wxz.f.*cada1f5dZ;
cada1f6dZ = cada1td1;
cada1f6 = Wxz.f*cada1f5;
cada1td1 = zeros(4,1);
cada1td1(Gator1Data.Index12) = Cchi.f.*cada1f6dZ;
cada1td1(2) = cada1td1(2) + cada1f6.*Cchi.dZ;
cada1f7dZ = cada1td1;
cada1f7 = cada1f6*Cchi.f;
cada1td1 = Cgam.f.*cada1f7dZ;
cada1td1(3) = cada1td1(3) + cada1f7.*Cgam.dZ;
cada1f8dZ = cada1td1;
cada1f8 = cada1f7*Cgam.f;
cada1td1 = zeros(4,1);
cada1td1(Gator1Data.Index13) = cada1f4dZ;
cada1td1 = cada1td1 + -cada1f8dZ;
cada1f9dZ = cada1td1;
cada1f9 = cada1f4 - cada1f8;
cada1f10dZ = T.dZ./prm.m;
cada1f10 = T.f/prm.m;
cada1td1 = cada1f9dZ;
cada1td1(1) = cada1td1(1) + cada1f10dZ;
cada1f11dZ = cada1td1;
cada1f11 = cada1f9 + cada1f10;
cada1td1 = zeros(13,1);
cada1td1(Gator1Data.Index14) = cada1f11dZ;
cada1td1(Gator1Data.Index15) = dZ.dZ(Gator1Data.Index16);
dZ.dZ = cada1td1;
dZ.f(1) = cada1f11;
%User Line: dZ(1) = -D/prm.m - 9.806*Sgam - Wxz*dZ(6)*Cchi*Cgam + T/prm.m;
cada1f1dZ = Smu.f.*L.dZ;
cada1f1 = L.f*Smu.f;
cada1f2dZ = prm.m.*V.dZ;
cada1f2 = prm.m*V.f;
cada1td1 = zeros(2,1);
cada1td1(1) = Cgam.f.*cada1f2dZ;
cada1td1(2) = cada1td1(2) + cada1f2.*Cgam.dZ;
cada1f3dZ = cada1td1;
cada1f3 = cada1f2*Cgam.f;
cada1td1 = zeros(2,1);
cada1td1(1) = cada1f1dZ./cada1f3;
cada1td1 = cada1td1 + -cada1f1./cada1f3.^2.*cada1f3dZ;
cada1f4dZ = cada1td1;
cada1f4 = cada1f1/cada1f3;
cada1f5dZ = dZ.dZ(Gator1Data.Index17);
cada1f5 = dZ.f(6);
cada1td1 = zeros(3,1);
cada1td1(3) = cada1f5.*Wxz.dZ;
cada1td1(Gator1Data.Index18) = cada1td1(Gator1Data.Index18) + Wxz.f.*cada1f5dZ;
cada1f6dZ = cada1td1;
cada1f6 = Wxz.f*cada1f5;
cada1td1 = zeros(4,1);
cada1td1(Gator1Data.Index19) = Schi.f.*cada1f6dZ;
cada1td1(2) = cada1td1(2) + cada1f6.*Schi.dZ;
cada1f7dZ = cada1td1;
cada1f7 = cada1f6*Schi.f;
cada1td1 = zeros(2,1);
cada1td1(1) = Cgam.f.*V.dZ;
cada1td1(2) = cada1td1(2) + V.f.*Cgam.dZ;
cada1f8dZ = cada1td1;
cada1f8 = V.f*Cgam.f;
cada1td1 = cada1f7dZ./cada1f8;
cada1td1(Gator1Data.Index20) = cada1td1(Gator1Data.Index20) + -cada1f7./cada1f8.^2.*cada1f8dZ;
cada1f9dZ = cada1td1;
cada1f9 = cada1f7/cada1f8;
cada1td1 = zeros(4,1);
cada1td1(Gator1Data.Index21) = cada1f4dZ;
cada1td1 = cada1td1 + cada1f9dZ;
cada1f10dZ = cada1td1;
cada1f10 = cada1f4 + cada1f9;
cada1td1 = zeros(17,1);
cada1td1(Gator1Data.Index22) = cada1f10dZ;
cada1td1(Gator1Data.Index23) = dZ.dZ(Gator1Data.Index24);
dZ.dZ = cada1td1;
dZ.f(2) = cada1f10;
%User Line: dZ(2) = L*Smu/(prm.m*V*Cgam) + Wxz*dZ(6)*Schi/(V*Cgam);
cada1f1dZ = Cmu.f.*L.dZ;
cada1f1 = L.f*Cmu.f;
cada1f2dZ = prm.m.*V.dZ;
cada1f2 = prm.m*V.f;
cada1td1 = cada1f1dZ./cada1f2;
cada1td1 = cada1td1 + -cada1f1./cada1f2.^2.*cada1f2dZ;
cada1f3dZ = cada1td1;
cada1f3 = cada1f1/cada1f2;
cada1f4dZ = 9.805999999999999.*Cgam.dZ;
cada1f4 = 9.805999999999999*Cgam.f;
cada1td1 = zeros(2,1);
cada1td1(2) = cada1f4dZ./V.f;
cada1td1(1) = cada1td1(1) + -cada1f4./V.f.^2.*V.dZ;
cada1f5dZ = cada1td1;
cada1f5 = cada1f4/V.f;
cada1td1 = zeros(2,1);
cada1td1(1) = cada1f3dZ;
cada1td1 = cada1td1 + -cada1f5dZ;
cada1f6dZ = cada1td1;
cada1f6 = cada1f3 - cada1f5;
cada1td1 = zeros(2,1);
cada1td1(2) = Cchi.f.*Wxz.dZ;
cada1td1(1) = cada1td1(1) + Wxz.f.*Cchi.dZ;
cada1f7dZ = cada1td1;
cada1f7 = Wxz.f*Cchi.f;
cada1td1 = zeros(3,1);
cada1td1(Gator1Data.Index25) = Sgam.f.*cada1f7dZ;
cada1td1(2) = cada1td1(2) + cada1f7.*Sgam.dZ;
cada1f8dZ = cada1td1;
cada1f8 = cada1f7*Sgam.f;
cada1f9dZ = dZ.dZ(Gator1Data.Index26);
cada1f9 = dZ.f(6);
cada1td1 = zeros(4,1);
cada1td1(Gator1Data.Index27) = cada1f9.*cada1f8dZ;
cada1td1(Gator1Data.Index28) = cada1td1(Gator1Data.Index28) + cada1f8.*cada1f9dZ;
cada1f10dZ = cada1td1;
cada1f10 = cada1f8*cada1f9;
cada1td1 = cada1f10dZ./V.f;
cada1td1(1) = cada1td1(1) + -cada1f10./V.f.^2.*V.dZ;
cada1f11dZ = cada1td1;
cada1f11 = cada1f10/V.f;
cada1td1 = zeros(4,1);
cada1td1(Gator1Data.Index29) = cada1f6dZ;
cada1td1 = cada1td1 + cada1f11dZ;
cada1f12dZ = cada1td1;
cada1f12 = cada1f6 + cada1f11;
cada1td1 = zeros(21,1);
cada1td1(Gator1Data.Index30) = cada1f12dZ;
cada1td1(Gator1Data.Index31) = dZ.dZ(Gator1Data.Index32);
dZ.dZ = cada1td1;
dZ.f(3) = cada1f12;
%User Line: dZ(3) = L*Cmu/(prm.m*V) - 9.806*Cgam/V + Wxz*Cchi*Sgam*dZ(6)/V;
dZ.dZ_size = [6,6];
dZ.dZ_location = Gator1Data.Index33;
end


function ADiGator_LoadData()
global ADiGator_dac3DOFdyn
ADiGator_dac3DOFdyn = load('dac3DOFdyn.mat');
return
end